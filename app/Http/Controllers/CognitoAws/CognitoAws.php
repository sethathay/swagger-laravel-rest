<?php

namespace App\Http\Controllers\CognitoAws;

use App\Http\Controllers\User\User;
use App\Http\Controllers\Tenant\Tenant;
use App\Http\Controllers\BaseLibrary\CriteriaOption\CriteriaOption;

class CognitoAws {
    /**
     * @var clientId
     */
    private $clientId;
    /**
     * @var poolId
     */
    private $poolId;
    
    public function __construct(){
        $this->clientId = env('AWS_COGNITO_IDENTITY_APP_CLIENT_ID');
        $this->poolId = env('AWS_COGNITO_IDENTITY_POOL_ID');
    }
    
    //Function to create aws-cognito object to use with this controller
    public function createCognitoAwsObject(){
        return new \Aws\CognitoIdentityProvider\CognitoIdentityProviderClient(
                [
                    'region' => env('AWS_COGNITO_REGION'),
                    'version' => 'latest',
                    'credentials' => [
                        'key'    => env('AWS_COGNITO_KEY'),
                        'secret' => env('AWS_COGNITO_SECRET'),
                    ],
                    'http'   => [ 'verify' => env('FILE_CACERT') ]
                ]
                );
    }
    /**
     * To create user in AWS Cognito and sending invitation email
     * @date 16-Oct-2017
     * @author Setha Thay <setha.thay@workevolve.com>
     * @param array $data
     */
    public function createUser($data){
        $awsCognitoObj = $this->createCognitoAwsObject();
        //Calling aws adminCreateUser method
        $awsCognitoObj->adminCreateUser([
            'DesiredDeliveryMediums' => ['EMAIL'],
            'UserAttributes' => [
                [
                    'Name' => 'given_name',
                    'Value' => $data['firstName']
                ],
                [
                    'Name' => 'family_name',
                    'Value' => $data['lastName']
                ],
                [
                    'Name' => 'email',
                    'Value' => $data['email']
                ],
                [
                    'Name' => 'email_verified',
                    'Value' => 'true'
                ]
            ],
            'Username' => $data['email'],
            'UserPoolId' => $this->getPoolId()
        ]);
    }
    /**
     * To update user in AWS Cognito and resending invitation email
     * @date 16-Oct-2017
     * @author Setha Thay <setha.thay@workevolve.com>
     * @param array $data
     */
    public function updateUser($data){
        $awsCognitoObj = $this->createCognitoAwsObject();
        $awsCognitoObj->adminCreateUser([
            'DesiredDeliveryMediums' => ['EMAIL'],
            'MessageAction' => 'RESEND',
            'UserAttributes' => [
                [
                    'Name' => 'given_name',
                    'Value' => $data['firstName']
                ],
                [
                    'Name' => 'family_name',
                    'Value' => $data['lastName']
                ],
                [
                    'Name' => 'email',
                    'Value' => $data['email']
                ],
                [
                    'Name' => 'email_verified',
                    'Value' => 'true'
                ]
            ],
            'Username' => $data['email'],
            'UserPoolId' => $this->getPoolId()
        ]);
    }
    /**
     * To delete user in AWS Cognito
     * @date 16-Oct-2017
     * @author Setha Thay <setha.thay@workevolve.com>
     * @param string $data username in AWS Cognito
     */
    public function deleteUser($data){
        $awsCognitoObj = $this->createCognitoAwsObject();
        $awsCognitoObj->adminDeleteUser([
            "Username" => $data,
            "UserPoolId" => $this->getPoolId() 
        ]);
    }
    /**
     * Use to validate access token send by client (Access token is generated by aws cognito)
     * @date 24-Aug-2016
     * @author Setha Thay <setha.thay@workevolve.com>
     * @return Object User Account
     */
    public function validateAccessToken()
    {
        $userObject = new User();
        //PROVIDER AWS COGNITO
        $objCognito = $this->createCognitoAwsObject();
        //Verify Bearer Access Token Sending from REQUEST HEADER
        $acc_token = "";
        $email = ""; $firstName = ""; $lastName = ""; $sub = "";

        if(!isset($_SERVER['HTTP_AUTHORIZATION']))
            throw new \InvalidArgumentException('Could not find access token, please pass in JWT');

        $authHeader = $_SERVER['HTTP_AUTHORIZATION'];
        $headerParts = explode(' ', $authHeader);

        if(count($headerParts) != 2)
            throw new \InvalidArgumentException('Authorization Header invalid');

        if($headerParts[0] != 'Bearer')
            throw new \InvalidArgumentException('Authorization Header invalid Type');

        $acc_token = $headerParts[1];

        //Get user infor by passing token with method "getUser"
        $result = $objCognito->getUser([
            'AccessToken' => $acc_token
        ]);

        foreach($result['UserAttributes'] as $att){
            switch($att['Name']){
                case "email" : 
                    $email = $att['Value'];
                    break;
                case "given_name" :
                    $firstName = $att['Value'];
                    break;
                case "family_name" :
                    $lastName = $att['Value'];
                    break;
                case "sub" :
                    $sub = $att['Value'];
            }
        }
        $criteria = new CriteriaOption();
        $criteria->where('email',$email);
        //$criteria->where('status.code',Tenant::VALUE_USR_ACTIVE);
        $userObject->pushCriteria($criteria);
        $userObject->applyCriteria();
        $re = $userObject->readOne();
        if($re){
            //Adding additional infor from AWS Cognito
            $re->awsCognito = array("firstName" => $firstName,
                                    "lastName" => $lastName,
                                    "sub" => $sub
                                    );
        }
        return $re;
    }
    //Function to get client id
    public function getClientId(){
        return $this->clientId;
    }
    //Function to get pool id
    public function getPoolId(){
        return $this->poolId;
    }
}
